modular_trader.framework.portfolio_builder
==========================================

.. py:module:: modular_trader.framework.portfolio_builder


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/modular_trader/framework/portfolio_builder/base/index
   /autoapi/modular_trader/framework/portfolio_builder/equal/index


Classes
-------

.. autoapisummary::

   modular_trader.framework.portfolio_builder.BasePortfolioBuilder
   modular_trader.framework.portfolio_builder.EqualWeightPortfolioBuilder


Package Contents
----------------

.. py:class:: BasePortfolioBuilder

   Bases: :py:obj:`abc.ABC`

   .. autoapi-inheritance-diagram:: modular_trader.framework.portfolio_builder.BasePortfolioBuilder
      :parts: 1
      :private-bases:


   Base class for portfolio builders.

   This class defines the interface for all portfolio builders.

   The `__call__` method is called by the framework to build the portfolio.
   It is expected to clear the current allocations and add the new allocations.

   The `run` method is called by `__call__` to build the portfolio.
   It is expected to return an iterable of `Allocation` objects.


   .. py:method:: __call__(context: modular_trader.context.Context, signals: modular_trader.signal.SignalCollection) -> Any


   .. py:method:: run(context: modular_trader.context.Context, signals: modular_trader.signal.SignalCollection) -> Iterable[modular_trader.allocation.Allocation]
      :abstractmethod:



.. py:class:: EqualWeightPortfolioBuilder

   Bases: :py:obj:`modular_trader.framework.portfolio_builder.base.BasePortfolioBuilder`

   .. autoapi-inheritance-diagram:: modular_trader.framework.portfolio_builder.EqualWeightPortfolioBuilder
      :parts: 1
      :private-bases:


   Assigns equal weight to all signals. Liquidates positions no longer in signals.


   .. py:method:: run(context: modular_trader.context.Context, signals: modular_trader.signal.SignalCollection) -> Iterable[modular_trader.allocation.Allocation]


