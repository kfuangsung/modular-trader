modular_trader.logging
======================

.. py:module:: modular_trader.logging


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/modular_trader/logging/base/index
   /autoapi/modular_trader/logging/trade/index


Classes
-------

.. autoapisummary::

   modular_trader.logging.BaseLogger
   modular_trader.logging.TradingLogger


Package Contents
----------------

.. py:class:: BaseLogger(logger: loguru._logger.Logger = logger)

   Base class for loggers.

   Attributes:
       logger (loguru.Logger): The logger to use.


   .. py:method:: critical(message: str, *args, **kwargs) -> None

      Logs a message at the critical level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: debug(message: str, *args, **kwargs) -> None

      Logs a message at the debug level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: error(message: str, *args, **kwargs) -> None

      Logs a message at the error level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: exception(message: str, *args, **kwargs) -> None

      Logs an exception at the error level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: info(message: str, *args, **kwargs) -> None

      Logs a message at the info level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: success(message: str, *args, **kwargs) -> None

      Logs a message at the success level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: trace(message: str, *args, **kwargs) -> None

      Logs a message at the trace level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:method:: warning(message: str, *args, **kwargs) -> None

      Logs a message at the warning level.

      Args:
          message (str): The message to log.
          *args: Additional positional arguments.
          **kwargs: Additional keyword arguments.



   .. py:attribute:: logger


.. py:class:: TradingLogger(logger: loguru._logger.Logger = logger)

   Bases: :py:obj:`modular_trader.logging.base.BaseLogger`

   .. autoapi-inheritance-diagram:: modular_trader.logging.TradingLogger
      :parts: 1
      :private-bases:


   A logger that logs messages to a file.

   This logger logs messages to a file. The file will be rotated when it reaches a
   certain size, and old files will be deleted after a certain number of days.

   Attributes:
       logger (Logger): The underlying logger.
       file_path (os.PathLike): The path to the log file.
       rotation_size_mb (int): The maximum size of the log file before it is
           rotated. If ``None``, the file will not be rotated.
       retention_days (int): The number of days to keep old log files. If
           ``None``, old files will not be deleted.


   .. py:method:: __post_init__()


   .. py:attribute:: file_path
      :type:  os.PathLike
      :value: None



   .. py:attribute:: logger
      :type:  loguru._logger.Logger
      :value: None



   .. py:attribute:: retention_days
      :type:  int
      :value: None



   .. py:attribute:: rotation_size_mb
      :type:  int
      :value: None



